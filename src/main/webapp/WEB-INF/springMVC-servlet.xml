<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       					   http://www.springframework.org/schema/beans/spring-beans.xsd
       					   http://www.springframework.org/schema/context
       					   https://www.springframework.org/schema/context/spring-context.xsd
       					   http://www.springframework.org/schema/mvc
       					   http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!-- 第一种方式，基于实现接口 -->
		<!-- 2.配置HandlerMapping -->
		<!-- <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/> -->
		
		<!-- 3.配置HandlerAdapter -->
		<!--  <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" /> -->
	<!-- 第二种方式，基于注释 -->
		
	<!--
		开启注解扫描
		MVC的注解驱动，用来简化配置，默认会加载许多内置的类型转换器，如果要使用自定义的类型转换器，需要自己指定
	-->
    <mvc:annotation-driven conversion-service="conversionService"/>
    <!--注解扫描-->
    <context:component-scan base-package="controller"/>
    
	<!-- 4.配置Handler -->
	<!-- <bean name="/hello" class="controller.HelloController"/> -->
	
	<!-- 5.配置ViewResolver -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/"/>
		<property name="suffix" value=".jsp"/>
		<!-- 6.配置View，使用JSP视图技术渲染页面 -->
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
	</bean>
	
	<!-- 
		第二节：访问静态资源
	 -->
	<!-- 1.使用Tomcat提供的默认Servlet处理静态资源 -->
	<!-- <mvc:default-servlet-handler /> -->
	<!-- 2.使用SpringMVC标签 -->
	<mvc:resources mapping="/js/**" location="/WEB-INF/js/"/>
	
	<!-- 直接访问jsp页面 -->
	<mvc:view-controller path="/userLogin" view-name="login"/>
	
	<!-- 
		第三节：方法返回值
			1.ModelAndView
			2.String 表示返回的是视图
				2-1：普通字符串：表示视图名称
				2-2：“forward：”+url 表示转发。当加"/"的时候表示从项目的根目录开始查找。不加的时候表示从相对的层级路径开始查找。
				2-3：“redirect：”+url 表示重定向
			3.void 将请求的url作为视图名称
			4.Object 表示返回的是数据模型（一般返回的是json数据）
	 -->
	 <!-- 
	 	第四节：URL的多种写法，根据请求方式访问(PathController.java)
	 	1.SpringMVC注释
	 	@Controller:将类映射为Controller，添加到IoC容器中
	 	@RequestMapping：配置请求的映射路径，即URL。该注释可以定义在方法上，也可以定义在类上，表示层级关系（参见PathController）
	 	@RequestParam：表示参数来源于请求参数
	 	@PathVariable：表示参数来源于URL
	 	@RequestHeader：表示参数来源于请求头
	 	@CookieValue：表示参数来源于Cookie
	 	@RequestBody：表示参数来源于请求体
	 	@ModelAttribute：将请求数据转换为对象
	 	@Valid：后台校验
	 	@InitBinder：类型转换，注册属性编辑器
	 	@ControllerAdivice：统一异常处理，处理全局异常
	 	@ExceptionHander:异常处理器，处理特定异常的方法
	 	@ResponseBody：结合返回值为Object的方法使用，用来返回JSON数据
	 	@RestController：将类映射为Controller层，默认为所有方法添加@RequestBody注释
	 	2.请求映射路径有三种方法
	 		2-1.Ant风格
	 			"*"表示单层目录，可以匹配任意字符
	 			"**"表示多层或单层目录，可以匹配任意字符
	 			"?"表示单个字符，必须有一个字符
	 		2-2.Rest风格
	 			{变量}表示URL中的占位符，可以结合@PathVariable获取值
	 			{变量：正则表达式}表示使用正则表达式限制值的格式
	 		2-3.固定的值
	 	3.根据请求方式来访问
	 		@RequestMapping(path="/test7", method = RequestMethod.POST)
	 		@GetMapping("/user/{id}")
	 		@PostMapping("/user/{id}")
	  -->
	  <!-- 
	  	第五节：方法的参数(ParamController.java)
	  		JAVAEE组件(test1)
	  			HttpServletRequest
	  			HttpServletResponse
	  			HttpSession
	  		IO流(test2)
	  			InputStream/OutputStream
	  			Reader/Writer
	  		向界面传数据(test3)
	  			Model,Map,ModelMap
	  			将数据存储到Request作用于中
	  		String和基本数据类型，表示参数从其他地方获取来的。
	  			默认追加了标签@RequestParam表示参数来源于请求参数，参数值来源于同名的请求参数(test4)(test5)
	  			@PathVariable：表示参数来源于URL(test6)
	  			@RequestHeader：表示参数来源于请求头(test7)
			 	@CookieValue：表示参数来源于Cookie(setCookie,test8)
			 	@RequestBody：表示参数来源于请求体(只有post请求才有请求体)(test9)
			自定义类型
				自定义类型，参数前添加注释@ModelAttribute，可将表单中同名的数据自动转换成自定义类型中的属性值。
				@ModelAttribute注释有两种用法：
					1.在方法参数的签名添加该注释(test10)
					  作用：将请求参数转换为对象
					2.在方法的上面添加该注释(sex)
					  作用：在调用所有目标方法前都会调用添加了@ModelAttribute注释的方法，并向模型中添加数据（一般用于向画面预先加载数据，例如下拉列表中的数据等）
			错误参数
				Errors,BingdingResult
				用来接收错误信息，实现服务端的数据校验
	   -->
	   <!-- 
	   	第六节：服务器校验框架
	   		1.简介
		   		1.1 JSR3003校验
		   			JSR303是一个数据验证的标准规范，用于对JAVA Bean的属性进行校验，称为BeanValidation
		   			提供了常用的校验注释
		   		1.2 hibernate Validator
		   			是JSR303的一个参考实现，并提供了扩展注释
	   		2.用法
	   			2.1 添加jar包
	   			2.2 为参数对象添加注解@Valid注解
	   			2.3 为对象属性添加注解
	    -->
	    <!-- 
	    第七节：数据绑定
	    	1.简介
	    		数据绑定流程：获取数据——查找转换器——转换——后台数据校验（可选流程）——数据绑定
	    		
	    		两种解决方式：
	    			方式1：使用ProperytEditor
	    			方式2：使用Converter（推荐使用这种方式）
	    	2.使用ProperytEditor
	    		步骤：
	    			1.定义属性编辑器（AddressdEditor.java）
	    			2.注册属性编辑器(在ParamController中添加以下标签)
	    				@InitBinder
	    		缺点：
	    			1.注册的代码嵌套在Controller中
	    			2.只能从字符串转换为相应的对象
	    	3.使用Converter
	    		步骤：
	    			1.定义转换器，实现Converter接口（StringAddressConverter.java）
	    			2.管理自定义转换器
	    			3.加载应用自定义转换器(<mvc:annotation-driven conversion-service="conversionService"/>)
	     -->
	<!-- 管理自定义转换器 -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<bean class="converter.StringAddressConverter"/>
			</set>
		</property>
	</bean>
</beans>